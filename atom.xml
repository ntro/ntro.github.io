<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hexo]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://p8ss.com/"/>
  <updated>2016-03-28T07:47:16.199Z</updated>
  <id>http://p8ss.com/</id>
  
  <author>
    <name><![CDATA[刘金龙]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://p8ss.com/2016/03/28/gulp%E6%8F%92%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    <id>http://p8ss.com/2016/03/28/gulp插件解析/</id>
    <published>2016-03-28T07:47:16.199Z</published>
    <updated>2016-03-28T07:47:16.199Z</updated>
    <content type="html"><![CDATA[<h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><p>现在我们将它分为两个单独的包： babel-cli和babel-core。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --global babel-cli&#10;&#10;$ npm install --save-dev babel-core</span><br></pre></td></tr></table></figure></p>
<p>如果你想要在命令行使用Babel，你可以安装babel-cli，或者你需要在一个Node项目中使用Babel，你可以使用babel-core。</p>
<p><strong>增加插件和预设值</strong><br>你需要根据你需要完成的任务来单独安装相应的插件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev babel-preset-es2015</span><br></pre></td></tr></table></figure></p>
<p>在.babelrc中配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#10;    &#34;presets&#34;: [&#34;es2015&#34;]&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>参考: <a href="http://cnodejs.org/topic/56460e0d89b4b49902e7fbd3" target="_blank" rel="external">cnodejs.org</a>  &amp;&amp;  <a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/README.md" target="_blank" rel="external">github.com</a></p>
</blockquote>
<h3 id="BrowserSync"><a href="#BrowserSync" class="headerlink" title="BrowserSync"></a>BrowserSync</h3><p>对于修改或简单实例的使用，命令行用法可以说是相当有帮助的。全局安装Browsersync后，你可以这样运行它：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ browser-sync <span class="built_in">start</span> &lt;options&gt;</span><br></pre></td></tr></table></figure></p>
<p>命令行常用的API:</p>
<blockquote>
<p>–files    文件路径看<br>–server 运行本地服务器（使用您的CWD作为Web根）<br>–host    指定主机名使用<br>–port    指定要使用的端口</p>
<h4 id="Browsersync_API"><a href="#Browsersync_API" class="headerlink" title="Browsersync API"></a>Browsersync API</h4><p>在 2.0.0 版本之前<br>我们允许直接引用Browsersync模块后即可使用：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 引用 browserSync 模块</span><br><span class="line">var browserSync = require("browser-sync");</span><br><span class="line"></span><br><span class="line">// 启动服务器</span><br><span class="line">browserSync(&#123;server: "./app"&#125;);</span><br><span class="line"></span><br><span class="line">// 调用reload方法 </span><br><span class="line">browserSync.reload("core.css");</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>在2.0.0+版本（推荐）<br>虽然上述方式依然支持，但现在我们推荐以下方式代替。调用 .create() 意味着你得到一个唯一的实例并允许您创建多个服务器或代理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// require &#21152;&#36733; browser-sync &#27169;&#22359;&#10;var bs = require(&#34;browser-sync&#34;).create();&#10;&#10;// .init &#21551;&#21160;&#26381;&#21153;&#22120;&#10;bs.init(&#123;&#10;    server: &#34;./app&#34;&#10;&#125;);&#10;&#10;// &#29616;&#22312;&#35831;BS&#65292;&#32780;&#19981;&#26159;&#26041;&#27861;&#10;// &#20027;Browsersync&#27169;&#22359;&#20986;&#21475;&#10;bs.reload(&#34;*.html&#34;);</span><br></pre></td></tr></table></figure></p>
<p>常用的API:</p>
<blockquote>
<p>.create() 创建一个唯一的实例并允许您创建多个服务器或代理<br>.init( config, cb ) 启动一个服务器<br>.reload( arg )    导致浏览器刷新，要么注入文件，实时更新改动<br>.stream( opts )    返回一个变换流，并且可以充当一次或多个文件</p>
</blockquote>
<p><strong>options (选项配置</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">browserSync(&#123;</span><br><span class="line">   notify: <span class="literal">false</span>, <span class="comment">//浏览器中的通知。</span></span><br><span class="line">   port: <span class="number">9000</span>, <span class="comment">//使用（而不是一个自动检测到Browsersync）特定端口 </span></span><br><span class="line">   server: &#123;</span><br><span class="line">     baseDir: [<span class="string">'.tmp'</span>, <span class="string">'app'</span>], <span class="comment">//多个基目录</span></span><br><span class="line">     routes: &#123; <span class="comment">//值是文件夹要提供的（相对于当前的工作目录）</span></span><br><span class="line">       <span class="string">'/bower_components'</span>: <span class="string">'bower_components'</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Browsersync + Gulp.js</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var gulp        = require(&#39;gulp&#39;);&#10;var browserSync = require(&#39;browser-sync&#39;).create();&#10;var sass        = require(&#39;gulp-sass&#39;);&#10;var reload      = browserSync.reload;&#10;&#10;// &#38745;&#24577;&#26381;&#21153;&#22120; + &#30417;&#21548; scss/html &#25991;&#20214;&#10;gulp.task(&#39;serve&#39;, [&#39;sass&#39;], function() &#123;&#10;&#10;    browserSync.init(&#123;&#10;        server: &#34;./app&#34;&#10;    &#125;);&#10;&#10;    gulp.watch(&#34;app/scss/*.scss&#34;, [&#39;sass&#39;]);&#10;    gulp.watch(&#34;app/*.html&#34;).on(&#39;change&#39;, reload);&#10;&#125;);&#10;&#10;// scss&#32534;&#35793;&#21518;&#30340;css&#23558;&#27880;&#20837;&#21040;&#27983;&#35272;&#22120;&#37324;&#23454;&#29616;&#26356;&#26032;&#10;gulp.task(&#39;sass&#39;, function() &#123;&#10;    return gulp.src(&#34;app/scss/*.scss&#34;)&#10;        .pipe(sass())&#10;        .pipe(gulp.dest(&#34;app/css&#34;))&#10;        .pipe(reload(&#123;stream: true&#125;));&#10;&#125;);&#10;&#10;gulp.task(&#39;default&#39;, [&#39;serve&#39;]);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>参考 <a href="http://www.browsersync.cn/docs/" target="_blank" rel="external">browsersync</a></p>
<h3 id="Ruby_SASS__26amp_3B_26amp_3B_SASS"><a href="#Ruby_SASS__26amp_3B_26amp_3B_SASS" class="headerlink" title="Ruby SASS &amp;&amp; SASS"></a>Ruby SASS &amp;&amp; SASS</h3></blockquote>
<p>gulp-ruby-sass基于ruby和sass，编译Sass文件为 CSS文件。 特点：比gulp-sass，但是更稳定，功能更丰富。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&#39;gulp&#39;);&#10;var sass = require(&#39;gulp-ruby-sass&#39;);&#10;&#10;gulp.task(&#39;default&#39;, function () &#123;&#10;    return gulp.src(&#39;src/scss/app.scss&#39;)&#10;        .pipe(sass(&#123;sourcemap: true, sourcemapPath: &#39;../scss&#39;&#125;))&#10;        .pipe(gulp.dest(&#39;dist/css&#39;));&#10;&#125;);&#10;//sourcemap&#21487;&#29992;&#65306;&#38656;&#35201;Sass&#62;=3.3.0 &#21644; sourcemapPath&#36873;&#39033;&#12290;&#10;//sourcemapPath&#65306;&#22240;&#20026;gulp-ruby-sass &#19981;&#30693;&#36947;&#20320;&#30340;CSS&#30446;&#24405; &#25110;&#32773;&#20320;&#26381;&#21153;&#23433;&#35013;&#30446;&#24405;&#65292;&#20320;&#19981;&#24471;&#19981;&#32473;&#19968;&#20123;&#39069;&#22806;&#30340;&#20449;&#24687;&#26469;&#24110;&#21161;&#27983;&#35272;&#22120;&#25214;&#21040;sourcemaps.</span><br></pre></td></tr></table></figure></p>
<p>gulp-sass是调用node-sass,有node.js环境就够了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(&#39;sass&#39;, function() &#123;&#10;    return gulp.src(src.scss)&#10;        .pipe(sass())&#10;        .pipe(gulp.dest(src.css))&#10;        .pipe(reload(&#123;stream: true&#125;));&#10;&#125;);</span><br></pre></td></tr></table></figure></p>
<p>通过查看依赖关系以及部分源码可以发现，gulp-ruby-sass和gulp-sass的区别就在于编译器的不同和编译过程不同。</p>
<p>: gulp-ruby-sass是调用sass，所以需要ruby环境，需要生成临时目录和临时文件<br>: gulp-sass是调用node-sass,有node.js环境就够了，编译过程不需要临时目录和文件，直接通过buffer内容转换。<br>搞定这个问题后，就可以愉快地使用了，我又能继续学习css了。</p>
<blockquote>
<p>参考：<a href="https://segmentfault.com/a/1190000003112509" target="_blank" rel="external">https://segmentfault.com/a/1190000003112509</a></p>
</blockquote>
<p><strong>错误提示</strong><br>Syntax error: Invalid GBK character “\xE5″<br>sass文件编译时候使用ruby环境，在xp环境中没有任何问题，但是在windows7环境下无论是界面化的koala工具还是命令行模式的都会出现以下错误。</p>
<p>找到ruby的安装目录，里面也有sass模块，如这个路径：<br>C:\Ruby\lib\ruby\gems\1.9.1\gems\sass-3.3.14\lib\sass<br>在这个文件里面engine.rb，添加一行代码（同方法1）<br>Encoding.default_external = Encoding.find(‘utf-8′)<br>放在所有的require XXXX 之后即可。</p>
<blockquote>
<p>参考：<a href="http://www.tuicool.com/articles/f2YVRv" target="_blank" rel="external">http://www.tuicool.com/articles/f2YVRv</a></p>
</blockquote>
<h3 id="Browserify"><a href="#Browserify" class="headerlink" title="Browserify"></a>Browserify</h3><blockquote>
<p>曾经，有一个 gulp-browserify 摆在我面前，后来它被加入了黑名单。</p>
</blockquote>
<p>社区为 gulp 开发了各种各样的插件，但 gulp 生态系统是有逼格的，不是来者不拒。对于一些不符合 gulp 理念的插件，被毫不留情地加入了黑名单，gulp-browserify 便是其中之一。<br><strong>直接使用Browserify</strong><br>要点：Stream 转换<br>vinyl-source-stream + vinyl-buffer<br>vinyl-source-stream: 将常规流转换为包含 Stream 的 vinyl 对象；<br>vinyl-buffer: 将 vinyl 对象内容中的 Stream 转换为 Buffer。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var browserify = require(&#39;browserify&#39;);  &#10;var gulp = require(&#39;gulp&#39;);  &#10;var uglify = require(&#39;gulp-uglify&#39;);  &#10;var source = require(&#39;vinyl-source-stream&#39;);  &#10;var buffer = require(&#39;vinyl-buffer&#39;);&#10;&#10;gulp.task(&#39;browserify&#39;, function() &#123;  &#10;  return browserify(&#39;./src/js/app.js&#39;)&#10;    .bundle()&#10;    .pipe(source(&#39;bundle.js&#39;)) // gives streaming vinyl file object&#10;    .pipe(buffer()) // &#60;----- convert from streaming to buffered vinyl file object&#10;    .pipe(uglify()) // now gulp-uglify works &#10;    .pipe(gulp.dest(&#39;./dist/js&#39;));&#10;&#125;);</span><br></pre></td></tr></table></figure></p>
<p>把常规流转转成 vinyl 对象流是在 gulp 中直接使用 browserify 的关键点，**理解了这点，所有问题都迎刃而解了，其他操作也是在此基础上进行的。</p>
<h3 id="Gulp__u9AD8_u7EA7_u6280_u5DE7"><a href="#Gulp__u9AD8_u7EA7_u6280_u5DE7" class="headerlink" title="Gulp 高级技巧"></a>Gulp 高级技巧</h3><p><strong>gulp 预期输入的是 Vinyl 文件对象，直接输入读取流当然不行。</strong><br>使用 gulp 过程中，偶尔会遇到 Streaming not supported 这样的错误。这通常是因为常规流与 vinyl 文件对象流有差异、gulp 插件使用了只支持 buffer （不支持 stream）的库。比如，不能把 Node 常规流直接传递给 gulp 及其插件。</p>
<blockquote>
<p>译者注：Gulp 管道中的「流」不是操作 Strings 和 Buffers 的常规 Node.js 流，而是启用 object mode 的流。Gulp 中的流发送的是 vinyl 文件对象。</p>
</blockquote>
<p><strong>Vinyl 文件对象</strong></p>
<p>Gulp 使用 vinyl-fs ，并从 vinyl-fs 继承了 gulp.src() 和 gulp.dest() 方法。而 vinyl-fs 使用了 vinyl 文件对象，即 「虚拟文件格式」。要在 gulp 及其插件中使用常规读取流，需要把读取流转换为 vinyl 文件对象先。<br>vinyl-source-stream 便是一个转换工具：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var source = require(&#39;vinyl-source-stream&#39;);  &#10;var marked = require(&#39;gulp-marked&#39;);&#10;&#10;fs.createReadStream(&#39;*.md&#39;)  &#10;  .pipe(source())&#10;  .pipe(marked())&#10;  .pipe(gulp.dest(&#39;dist/&#39;));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Vinyl 文件对象的内容可以是以下三种形式：Stream Buffer null</p>
</blockquote>
<p>gulp.src() 传输的流是把内容转换成 buffer 的 vinyl 文件对象，因此 gulp 中得到的不是数据块（chunk），而是包含 buffer 的虚拟文件。Vinyl 文件格式有一个 contents 属性来存放文件内容（buffer 或者 stream 或者 null）。</p>
<p><strong>Gulp 默认使用 buffer</strong><br>buffer优点：基于完整的源内容做转换<br>缺点：对于大文件处理效率低下，因为文件发射回对象流之前必须完整读取<br>因此 gulp 选择默认使用内容转换成 buffer 的 vinyl 对象流，以方便处理。</p>
<blockquote>
<p>参考： <em><a href="https://csspod.com/advanced-tips-for-using-gulp-js/" target="_blank" rel="external">https://csspod.com/advanced-tips-for-using-gulp-js/</a></em></p>
</blockquote>
<h3 id="u5176_u4ED6_u63D2_u4EF6"><a href="#u5176_u4ED6_u63D2_u4EF6" class="headerlink" title="其他插件"></a>其他插件</h3><p>gulp-load-plugins <em>自动加载gulp开头的插件</em><br>gulp-useref gulp-if gulp-htmlmin <em>html模板&amp;压缩</em><br>gulp-babel gulp-eslint  gulp-uglify <em>js依赖&amp;检查&amp;压缩</em><br>gulp-sass gulp-autoprefixer gulp-cssnano  <em>css转换&amp;后缀&amp;美化</em><br>gulp-cache gulp-imagemin <em>图片缓存&amp;压缩</em><br>gulp-plumber <em>错误处理</em><br>gulp-sourcemaps <em>压缩地图</em><br>gulp-size <em>统计大小&amp;时间</em><br>del <em>删除文件</em><br>lodash <em>工具js</em><br>main-bower-files wiredep <em>bower依赖</em></p>
<blockquote>
<p>参考：yeoman加载器 generator-webapp</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><p>现在我们将它分为两个单独的包： babel-cli和babel-core。<br><figure class="hi]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端适配方案]]></title>
    <link href="http://p8ss.com/2016/01/27/%E5%89%8D%E7%AB%AF%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/"/>
    <id>http://p8ss.com/2016/01/27/前端适配方案/</id>
    <published>2016-01-27T09:56:09.000Z</published>
    <updated>2016-01-27T09:57:10.550Z</updated>
    <content type="html"><![CDATA[<p>   早在Web 2.0 时代为了兼容各种浏览器而抓狂不已，进入移动互联时代，本想webkit内核浏览器一家独大应该不用大费周章的寻找兼容方案，看来还是太年轻了。</p>
<p>-&gt;<img src="http://www.makmong.com/wp-content/uploads/2015/12/120915_0834_1.png" alt="enter description here">&lt;-</p>
<p>上面展示了各个厂商的不同设备的屏幕大小，由此引出我们今天的主题 – 移动端适配。</p>
<p>通过自己做的几个移动端适配，总的来说其实各种适配方案看起来基本都是在对meta viewport做处理, 以达到最好的效果.</p>
<h3 id="u56FA_u5B9A_u5BBD_u5EA6_uFF0Cviewport__u7F29_u653E"><a href="#u56FA_u5B9A_u5BBD_u5EA6_uFF0Cviewport__u7F29_u653E" class="headerlink" title="固定宽度，viewport 缩放"></a>固定宽度，viewport 缩放</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=640,target-densitydpi=devici-dpi,user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>视觉稿、页面宽度、viewport width 使用统一宽度，利用浏览器自身缩放完成适配。页面样式（包括图像元素）完全按照视觉稿的尺寸，使用定值单位 （px、em）即可完成。</p>
</blockquote>
<p>-&gt;<img src="http://www.makmong.com/wp-content/uploads/2015/12/222.png" alt="enter description here">&lt;-<br><strong>优点：</strong></p>
<ol>
<li>开发简单缩放交给浏览器，完全按视觉稿切图。</li>
<li>还原精准 绝对等比例缩放，可以精准还原视觉稿（不考虑清晰度的情况下）。</li>
<li>测试方便在PC端即可完成大部分测试，手机端只需酌情调整一些细节（比如图标、字体混合排列时，因为字体不同造成的对齐问题）。</li>
</ol>
<p><strong>存在的问题：</strong></p>
<ol>
<li>像素丢失 对于一些分辨率较低的手机，可能设备像素还未达到指定的 viewport 宽度，此时屏幕的渲染可能就不准确了。比较常见的是边框“消失”了，不过随着手机硬件的更新，这个问题会越来越少的。</li>
<li>缩放失效 某些安卓机不能正常的根据 meta 标签中 width 的值来缩放 viewport，需要配合initial-scale 。</li>
<li>文本折行存在于缩放失效的机型中，某些手机为了便于文本的阅读，在文本到达 viewport 边缘（非元素容器的边缘）时即进行折行，而当 viewport 宽度被修正后，浏览器并没有正确的重绘，所以就发现文本没有占满整行。一些常用的段落性文本标签会存在该问题。<br>解决方案：</li>
</ol>
<blockquote>
<p>缩放失效问题需通过 js 动态设定 initial-scale。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fixScreen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;					</span><br><span class="line">	<span class="keyword">var</span> metaEl = doc.querySelector(<span class="string">'meta[name="viewport"]'</span>),					</span><br><span class="line">        metaCtt = metaEl ? metaEl.content :					<span class="string">''</span>,					</span><br><span class="line">        matchScale = metaCtt.match(<span class="regexp">/initial\-scale=([\d\.]+)/</span>),					</span><br><span class="line">        matchWidth = metaCtt.match(<span class="regexp">/width=([^,\s]+)/</span>);					</span><br><span class="line">					<span class="keyword">if</span></span><br><span class="line">					( metaEl &amp;&amp;</span><br><span class="line">					!matchScale &amp;&amp;</span><br><span class="line">					( matchWidth &amp;&amp; matchWidth[<span class="number">1</span>]</span><br><span class="line">					!=</span><br><span class="line">					<span class="string">'device-width'</span>)</span><br><span class="line">					)</span><br><span class="line">					&#123;					</span><br><span class="line">	<span class="keyword">var</span> width = <span class="built_in">parseInt</span>(matchWidth[<span class="number">1</span>]),					</span><br><span class="line">            iw = win.innerWidth || width,					</span><br><span class="line">            ow = win.outerWidth || iw,					</span><br><span class="line">            sw = win.screen.width || iw,					</span><br><span class="line">            saw = win.screen.availWidth || iw,					</span><br><span class="line">            ih = win.innerHeight || width,					</span><br><span class="line">            oh = win.outerHeight || ih,					</span><br><span class="line">            ish = win.screen.height || ih,					</span><br><span class="line">            sah = win.screen.availHeight || ih,					</span><br><span class="line">            w = <span class="built_in">Math</span>.min(iw,ow,sw,saw,ih,oh,ish,sah),					</span><br><span class="line">            scale = w / width;					</span><br><span class="line">					<span class="keyword">if</span></span><br><span class="line">					( ratio &lt;</span><br><span class="line">					<span class="number">1</span>)</span><br><span class="line">					&#123;					</span><br><span class="line">            metaEl.content +=</span><br><span class="line">					<span class="string">',initial-scale='</span></span><br><span class="line">					+ ratio +</span><br><span class="line">					<span class="string">',maximum-scale='</span></span><br><span class="line">					+ ratio +</span><br><span class="line">					<span class="string">', minimum-scale='</span></span><br><span class="line">					+ scale;					</span><br><span class="line">					&#125;					</span><br><span class="line">	&#125;</span><br><span class="line">					</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">`					</span><br><span class="line">&gt;文本折行问题可以通过 css 样式解决。</span><br><span class="line">`</span><span class="string">``</span>css</span><br><span class="line">section, p, div,					</span><br><span class="line">h1, h2, h3, h4, h5, h6,					</span><br><span class="line">.fix-<span class="keyword">break</span> &#123;					</span><br><span class="line">   background: tranparent url(<span class="string">'about:blank'</span>);					</span><br><span class="line">   word-<span class="keyword">break</span>: <span class="keyword">break</span>-all;					</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">`					</span><br><span class="line"></span><br><span class="line">### 利用 rem 布局</span><br><span class="line"></span><br><span class="line">`</span><span class="string">``</span>html</span><br><span class="line">&lt;meta name=“viewport” content=“width=device-width, initial-scale=<span class="number">1</span>, maximum-scale=<span class="number">1</span>″&gt;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>简单的理解，rem就是相对于根元素的font-size来做计算。而我们的方案中使用rem单位，是能轻易的根据的font-size计算出元素的盒模型大小。页面任何需要弹性适配的元素，尺寸均换算为 rem 进行布局；当页面渲染时，根据页面有效宽度进行计算，调整 rem 的大小，动态缩放以达到适配的效果。利用该方案，还可以根据 devicePixelRatio 设定 initial-scale 来放大 viewport，使页面按照物理像素渲染，提升清晰度。<br>-&gt;<img src="http://www.makmong.com/wp-content/uploads/2015/12/1111.png" alt="enter description here">&lt;-</p>
<p><strong>优点：</strong></p>
<ol>
<li>清晰度高，能达到物理像素的清晰度。</li>
<li>能解决 DPR 引起的”1像素”问题。</li>
<li>向后兼容较好，即便屏幕宽度增加、PPI 增加该方案依旧适用。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>适配 js 需尽可能早进入，减少（避免）viewport 变化引起的重绘。</li>
<li>某些Android机会丢掉 rem 小数部分。</li>
<li>需要预编译库进行单位转换。</li>
</ol>
<blockquote>
<p>动态调整 rem 的方法如下：<br>```js<br>var fixScreen = function() {<br>    var metaEl = doc.querySelector(‘meta[name=”viewport”]’),<br>        metaCtt = metaEl ? metaEl.content :                    ‘’,<br>        matchScale = metaCtt.match(/initial-scale=([\d.]+)/),<br>        matchWidth = metaCtt.match(/width=([^,\s]+)/);<br>                        if<br>                        (<br>                        !metaEl )<br>                        { // REM</p>
</blockquote>
<pre><code>    var docEl = doc.documentElement,            
        maxwidth = docEl.dataset.mw || 750, // 每 dpr 最大页面宽度                    
        dpr = isIos ? Math.min(win.devicePixelRatio, 3) : 1,                    
        scale = 1 / dpr,                
        tid;                    
    docEl.removeAttribute(&apos;data-mw&apos;);                    
    docEl.dataset.dpr = dpr;                    
    metaEl = doc.createElement(&apos;meta&apos;);                    
    metaEl.name = &apos;viewport&apos;;                    
    metaEl.content =
                &apos;initial-scale=&apos;
                + ratio +
                &apos;,maximum-scale=&apos;
                + ratio +
                &apos;, minimum-scale=&apos;
                + scale;                    
    docEl.firstElementChild.appendChild(metaEl);                    
                var refreshRem =
                function(){                    
                var width = docEl.getBoundingClientRect().width;                    
                if
                (width / dpr &gt; maxwidth)
                {                    
            width = maxwidth * dpr;                    
                }                    
                var rem = width / 16;                    
        docEl.style.fontSize = rem + &apos;px&apos;;
};            
//...
    refreshRem();
}                    
</code></pre><p>}<br>```<br>注意，较小的背景图（比如一些 icon）的 background-size 不要使用具体 rem 数值，裁剪后会出现边缘丢失。应使用与元素等尺寸切图，设定 background-size: contain|cover 来缩放。</p>
<p>这种方案可以参考阿里的实现方式: lib-flexible库</p>
<p>lib-flexible库的使用方法非常的简单，只需要在Web页面的中添加对应的flexible_css.js,flexible.js文件</p>
<p>两种方案各有所长，实际运用中还需按需选取啦：）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>   早在Web 2.0 时代为了兼容各种浏览器而抓狂不已，进入移动互联时代，本想webkit内核浏览器一家独大应该不用大费周章的寻找兼容方案，看来还是太年轻了。</p>
<p>-&gt;<img src="http://www.makmong.com/wp-content]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://p8ss.com/2016/01/27/hello-world/"/>
    <id>http://p8ss.com/2016/01/27/hello-world/</id>
    <published>2016-01-27T07:56:25.159Z</published>
    <updated>2016-01-27T07:56:25.159Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.]]>
    </summary>
    
  </entry>
  
</feed>
